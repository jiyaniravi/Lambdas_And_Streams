> Lambdas VS Method References : When to choose what?
> https://tryjshell.org/
> stream(), .distinct(), .sorted(), .filter(), .map(), .reduce(), forEach()
> Comparator.naturalOrder()
> Comparator.reverseOrder()
> Custom comparision
> Intermediate Operations	: filter(), map(), distinct, sorted()
> Terminate Operations 		: reduce(), collect(), forEach()
> Functional Interface 		: Having only one abstract method
> No, Lambda does not translate to anonymous class at compile time! Its runtime 'InvokeDynamic' instruction
	https://www.logicbig.com/tutorials/core-java-tutorial/java-8-enhancements/java-lambda-functional-aspect.html
> Functional Descriptor
> Predicate, Function, Consumer, BinaryOperator, Supplier
> Difference between BinaryOperator and IntBinaryOperator
> Java 9 : takeWhile(), dropWhile() APIs of stream
> findFirst(Optional Usage) vs limit
> https://blog.codefx.org/java/dev/why-isnt-optional-serializable/
> https://blog.codefx.org/java/serialize-optional/
> findAny() VS findFirst() API [Behavior in non-parallel environment and Parallel environment]
> Different ways to create Streams, Primitive Streams:
	> Stream.of(...) : ReferencePipeline
	> Arrays.stream(...) : IntPipeline : Arrays.stream(numberArray).sum(), .average(), .min(), .max()
	> IntStream.range(1,10) : Will not include last number, i.e. 10
	> IntStream.rangeClosed(1,10) : Will not include last number 10 as well
	> IntStream.iterate(2, e -> e*2).limit(10).boxed().collect(Collectors.toList()))
	> LongStream.rangeClosed(1,21).mapToObj(BigInteger::valueOf).reduce(BigInteger.ONE, BigInteger::multiply)
> Misc :	
> List<String> courses = new ArrayList<>(Arrays.asList("Spring","Spring Boot","API","AWS","Azure","PCF","Docker","Kubernetes"))
> courses.stream().collect(Collectors.joining(","))
> courses.stream().map(course -> course.split("")).flatMap(Arrays::stream).collect(Collectors.toList())
> courses.stream().map(course -> course.split("")).flatMap(Arrays::stream).distinct().collect(Collectors.toList())
> courses.stream().flatMap(course -> courses2.stream().map(course2 -> List.of(course, course2))).collect(Collectors.toList())
> courses.stream().flatMap(course -> courses2.stream().map(course2 -> List.of(course, course2)))
														.filter(innerList -> !innerList.get(0).equals(innerList.get(1)))
														.collect(Collectors.toList())
> Higher Order Functions : Higher order functions are the functions which returns the functions

> courses.stream().peek(System.out::println).filter(course -> course.length()>10).map(String::toUpperCase).peek(System.out::println).findFirst()

> Direct modification on List/Set collections :
	.replaceAll(str -> str.toUpperCase())
	.removeIf( course -> course.length()<5)
	
> https://courses.in28minutes.com/												

> Git with IntelliJ : Shortcuts 
> Ctrl + Alt + a 	: Add file
> Ctrl + k		 	: Commit Prompt
> Alt  + i		 	: Commit
> Ctrl + Shift + k  : Push Prompt
> Alt  + p			: Push

